{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["App","state","data","no","_loadingOT","temp","i","push","book","books","old_testment","_this","setState","_loagingNT","new_testment","_displayData","map","react_default","a","createElement","className","id","num","key","onClick","_selectBook","name","event","n","target","window","location","assign","link","align","this","length","href","Component","Boolean","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"y6HAwEeA,6MAlEbC,MAAQ,CACNC,KAAM,GACNC,GAAI,QAGNC,WAAa,WAEX,IADA,IAAIC,EAAO,GACHC,EAAE,EAAEA,EAAE,IAAIA,EAChBD,EAAKE,KAAKC,EAAKN,KAAK,GAAGO,MAAMC,aAAaJ,IAE5CK,EAAKC,SAAS,CACZV,KAAMG,EACNF,GAAI,OAIRU,WAAa,WAEX,IADA,IAAIR,EAAO,GACFC,EAAI,EAAGA,EAAI,KAAMA,EACxBD,EAAKE,KAAKC,EAAKN,KAAK,GAAGO,MAAMK,aAAaR,IAE5CK,EAAKC,SAAS,CACZV,KAAMG,EACNF,GAAI,OAIRY,aAAe,WAMb,OALcJ,EAAKV,MAAMC,KAAKc,IAAI,SAAAd,GAChC,OACEe,EAAAC,EAAAC,cAAA,UAAQC,UAAU,WAAWC,GAAInB,EAAKoB,IAAKC,IAAKrB,EAAKoB,IAAKE,QAASb,EAAKc,aAAcvB,EAAKwB,WAMjGD,YAAc,SAAAE,GACZ,IAAIC,EAAID,EAAME,OAAOR,GAAG,EACH,IAAlBV,EAAKV,MAAME,KACZyB,GAAM,GAERE,OAAOC,SAASC,OAAOrB,EAAKV,MAAMC,KAAK0B,GAAGK,+EAI1C,OACEhB,EAAAC,EAAAC,cAAA,OAAKC,UAAU,aAAac,MAAM,UAChCjB,EAAAC,EAAAC,cAAA,UAAQE,GAAG,KAAKG,QAASW,KAAK/B,YAA9B,gBAGAa,EAAAC,EAAAC,cAAA,UAAQE,GAAG,KAAKG,QAASW,KAAKtB,YAA9B,gBAGAI,EAAAC,EAAAC,cAAA,OAAKC,UAAU,SACa,IAAzBe,KAAKlC,MAAMC,KAAKkC,OAAaD,KAAKpB,eAAiB,MAEtDE,EAAAC,EAAAC,cAAA,KAAGe,MAAM,OAAOb,GAAG,UAAnB,sMAGAJ,EAAAC,EAAAC,cAAA,UAAQE,GAAG,QAAOJ,EAAAC,EAAAC,cAAA,KAAGkB,KAAK,+BAAR,yBA5DRC,aCOEC,QACW,cAA7BT,OAAOC,SAASS,UAEe,UAA7BV,OAAOC,SAASS,UAEhBV,OAAOC,SAASS,SAASC,MACvB,2DCZNC,IAASC,OAAO1B,EAAAC,EAAAC,cAACyB,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.e3d4a1a5.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport './App.css';\nimport book from \"./book.json\";\nimport { Redirect } from \"react-router-dom\";\n\nclass App extends Component{\n  state = {\n    data: [],\n    no: null\n  }\n\n  _loadingOT = () => {\n    let temp = [];\n    for(let i=1;i<7;++i){\n      temp.push(book.data[0].books.old_testment[i]);\n    }\n    this.setState({\n      data: temp,\n      no: 1\n    });\n  };\n\n  _loagingNT = () => {\n    let temp = [];\n    for (let i = 1; i < 13; ++i) {\n      temp.push(book.data[0].books.new_testment[i]);\n    }\n    this.setState({\n      data: temp,\n      no: 2\n    });\n  }\n\n  _displayData = () => {\n    const items = this.state.data.map(data => {\n      return (\n        <button className=\"testment\" id={data.num} key={data.num} onClick={this._selectBook}>{data.name}</button>\n      );\n    });\n    return items;\n  };\n\n  _selectBook = event => {\n    let n = event.target.id-1;\n    if(this.state.no === 2){\n      n = n-6;\n    }\n    window.location.assign(this.state.data[n].link);\n  };\n\n  render(){\n    return(\n      <div className=\"AppDisplay\" align=\"center\">\n        <button id=\"ot\" onClick={this._loadingOT}>\n          구약\n        </button>\n        <button id=\"nt\" onClick={this._loagingNT}>\n          신약\n        </button>\n        <div className=\"books\">\n          {this.state.data.length!==0 ? this._displayData() : null}\n        </div>\n        <p align=\"left\" id=\"notice\">\n          파일은 sermon-online.com에서 가져왔으며 오류 및 수정은 메일로 알려주시기 바랍니다.\n        </p>\n        <button id=\"mail\"><a href=\"mailto:jungdw0624@gmail.com\" >메일</a></button>\n      </div>\n    )\n  }\n  \n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}